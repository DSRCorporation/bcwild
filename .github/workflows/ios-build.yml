name: iOS Build

on:
  push:
    branches: [ main ]

jobs:
  build:
    runs-on: macOS-latest

    steps:
    
      - name: Checkout code
        uses: actions/checkout@v2
        
      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.KEYCHIAN_PASSWD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles
          
      - name: Pull & update submodules recursively
        run: |
          git submodule update --init --recursive

      - name: Configure node
        uses: actions/setup-node@v1
        with:
          node-version: "16.15.0"
          registry-url: "https://registry.npmjs.org"

      - name: Configure ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.7

      - name: What XCode are we using?
        run: |
          xcode-select -p

      # Watch for changes to the HEAD ref, use
      # git for cache keys.
      - name: Generate cache key
        run: |
          echo $(git rev-parse HEAD:app/ios) > ./dd-cache-key.txt

      - uses: actions/cache@v2
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ env.cacheId }}-${{ hashFiles('**/dd-cache-key.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-


      - name: Install react native dependencies
        working-directory: app/BCWildlife
        run: |
          npm ci
          git status
          
      - name: Install iOS dependencies
        # if: steps.pod-cache.outputs.cache-hit != 'true' || steps.npm-cache.outputs.cache-hit != 'true'
        working-directory: app/BCWildlife/ios
        run: |
          gem install cocoapods && \
          pod install && \
          git status && \
          git diff Podfile.lock
                    
      - name: Release build
        working-directory: app/BCWildlife/ios
        run: |
          xcodebuild \
          -workspace BCWild.xcworkspace \
          -scheme BCWild \
          -configuration Release \
          -derivedDataPath xbuild \
          -xcconfig release.xcconfig \
          -archivePath BCWild.xcarchive \
          -sdk iphoneos \
          -verbose \
          archive    
          
      - name: Archive & Sign
        working-directory: app/BCWildlife/ios
        run: |
          xcodebuild \
          -exportArchive \
          -archivePath BCWild.xcarchive \
          -exportPath export \
          -exportOptionsPlist ExportOptions.plist \
          -verbose     

      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: ios-build
          path: app/BCWildlife/ios/build/BCWild.ipa    


